// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: assets.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AssetsService service

func NewAssetsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AssetsService service

type AssetsService interface {
	// ----------------资产管理-----------------
	// 资产汇总面板
	GetAssetsOverview(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*AssetsOverviewReply, error)
	// 查询资产列表，附带查询可操作信息
	GetAssetsList(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ListReply, error)
	// 查询资产详情
	GetAssetsDetail(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*AssetsDetailReply, error)
	// 拉取应用信息,创建资产
	CreateAssets(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ResultReply, error)
	// 操作资产
	OpterateAssets(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ResultReply, error)
	// 查询资产历史配置文件列表
	GetAssetsConfList(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ListReply, error)
	// 应用选中配置文件
	ApplyAssetsConf(ctx context.Context, in *AssetsOptRequest, opts ...client.CallOption) (*ResultReply, error)
	// 获取资产类别对应配置信息
	GetOptDetailForAssets(ctx context.Context, in *AssetsOptRequest, opts ...client.CallOption) (*AppConfTmlpReply, error)
	// ----------------应用管理-----------------
	// 查询可创建应用列表
	GetAppList(ctx context.Context, in *ApplicationRequest, opts ...client.CallOption) (*ListReply, error)
	// 查询详细操作模板信息
	GetAppConf(ctx context.Context, in *ApplicationRequest, opts ...client.CallOption) (*AppConfTmlpReply, error)
	// 查询应用信息，包含版本信息列表
	GetAppDetail(ctx context.Context, in *ApplicationRequest, opts ...client.CallOption) (*ApplicationDetailReply, error)
}

type assetsService struct {
	c    client.Client
	name string
}

func NewAssetsService(name string, c client.Client) AssetsService {
	return &assetsService{
		c:    c,
		name: name,
	}
}

func (c *assetsService) GetAssetsOverview(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*AssetsOverviewReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAssetsOverview", in)
	out := new(AssetsOverviewReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetAssetsList(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ListReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAssetsList", in)
	out := new(ListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetAssetsDetail(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*AssetsDetailReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAssetsDetail", in)
	out := new(AssetsDetailReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) CreateAssets(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ResultReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.CreateAssets", in)
	out := new(ResultReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) OpterateAssets(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ResultReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.OpterateAssets", in)
	out := new(ResultReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetAssetsConfList(ctx context.Context, in *AssetsRequest, opts ...client.CallOption) (*ListReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAssetsConfList", in)
	out := new(ListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) ApplyAssetsConf(ctx context.Context, in *AssetsOptRequest, opts ...client.CallOption) (*ResultReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.ApplyAssetsConf", in)
	out := new(ResultReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetOptDetailForAssets(ctx context.Context, in *AssetsOptRequest, opts ...client.CallOption) (*AppConfTmlpReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetOptDetailForAssets", in)
	out := new(AppConfTmlpReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetAppList(ctx context.Context, in *ApplicationRequest, opts ...client.CallOption) (*ListReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAppList", in)
	out := new(ListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetAppConf(ctx context.Context, in *ApplicationRequest, opts ...client.CallOption) (*AppConfTmlpReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAppConf", in)
	out := new(AppConfTmlpReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsService) GetAppDetail(ctx context.Context, in *ApplicationRequest, opts ...client.CallOption) (*ApplicationDetailReply, error) {
	req := c.c.NewRequest(c.name, "AssetsService.GetAppDetail", in)
	out := new(ApplicationDetailReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AssetsService service

type AssetsServiceHandler interface {
	// ----------------资产管理-----------------
	// 资产汇总面板
	GetAssetsOverview(context.Context, *AssetsRequest, *AssetsOverviewReply) error
	// 查询资产列表，附带查询可操作信息
	GetAssetsList(context.Context, *AssetsRequest, *ListReply) error
	// 查询资产详情
	GetAssetsDetail(context.Context, *AssetsRequest, *AssetsDetailReply) error
	// 拉取应用信息,创建资产
	CreateAssets(context.Context, *AssetsRequest, *ResultReply) error
	// 操作资产
	OpterateAssets(context.Context, *AssetsRequest, *ResultReply) error
	// 查询资产历史配置文件列表
	GetAssetsConfList(context.Context, *AssetsRequest, *ListReply) error
	// 应用选中配置文件
	ApplyAssetsConf(context.Context, *AssetsOptRequest, *ResultReply) error
	// 获取资产类别对应配置信息
	GetOptDetailForAssets(context.Context, *AssetsOptRequest, *AppConfTmlpReply) error
	// ----------------应用管理-----------------
	// 查询可创建应用列表
	GetAppList(context.Context, *ApplicationRequest, *ListReply) error
	// 查询详细操作模板信息
	GetAppConf(context.Context, *ApplicationRequest, *AppConfTmlpReply) error
	// 查询应用信息，包含版本信息列表
	GetAppDetail(context.Context, *ApplicationRequest, *ApplicationDetailReply) error
}

func RegisterAssetsServiceHandler(s server.Server, hdlr AssetsServiceHandler, opts ...server.HandlerOption) error {
	type assetsService interface {
		GetAssetsOverview(ctx context.Context, in *AssetsRequest, out *AssetsOverviewReply) error
		GetAssetsList(ctx context.Context, in *AssetsRequest, out *ListReply) error
		GetAssetsDetail(ctx context.Context, in *AssetsRequest, out *AssetsDetailReply) error
		CreateAssets(ctx context.Context, in *AssetsRequest, out *ResultReply) error
		OpterateAssets(ctx context.Context, in *AssetsRequest, out *ResultReply) error
		GetAssetsConfList(ctx context.Context, in *AssetsRequest, out *ListReply) error
		ApplyAssetsConf(ctx context.Context, in *AssetsOptRequest, out *ResultReply) error
		GetOptDetailForAssets(ctx context.Context, in *AssetsOptRequest, out *AppConfTmlpReply) error
		GetAppList(ctx context.Context, in *ApplicationRequest, out *ListReply) error
		GetAppConf(ctx context.Context, in *ApplicationRequest, out *AppConfTmlpReply) error
		GetAppDetail(ctx context.Context, in *ApplicationRequest, out *ApplicationDetailReply) error
	}
	type AssetsService struct {
		assetsService
	}
	h := &assetsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AssetsService{h}, opts...))
}

type assetsServiceHandler struct {
	AssetsServiceHandler
}

func (h *assetsServiceHandler) GetAssetsOverview(ctx context.Context, in *AssetsRequest, out *AssetsOverviewReply) error {
	return h.AssetsServiceHandler.GetAssetsOverview(ctx, in, out)
}

func (h *assetsServiceHandler) GetAssetsList(ctx context.Context, in *AssetsRequest, out *ListReply) error {
	return h.AssetsServiceHandler.GetAssetsList(ctx, in, out)
}

func (h *assetsServiceHandler) GetAssetsDetail(ctx context.Context, in *AssetsRequest, out *AssetsDetailReply) error {
	return h.AssetsServiceHandler.GetAssetsDetail(ctx, in, out)
}

func (h *assetsServiceHandler) CreateAssets(ctx context.Context, in *AssetsRequest, out *ResultReply) error {
	return h.AssetsServiceHandler.CreateAssets(ctx, in, out)
}

func (h *assetsServiceHandler) OpterateAssets(ctx context.Context, in *AssetsRequest, out *ResultReply) error {
	return h.AssetsServiceHandler.OpterateAssets(ctx, in, out)
}

func (h *assetsServiceHandler) GetAssetsConfList(ctx context.Context, in *AssetsRequest, out *ListReply) error {
	return h.AssetsServiceHandler.GetAssetsConfList(ctx, in, out)
}

func (h *assetsServiceHandler) ApplyAssetsConf(ctx context.Context, in *AssetsOptRequest, out *ResultReply) error {
	return h.AssetsServiceHandler.ApplyAssetsConf(ctx, in, out)
}

func (h *assetsServiceHandler) GetOptDetailForAssets(ctx context.Context, in *AssetsOptRequest, out *AppConfTmlpReply) error {
	return h.AssetsServiceHandler.GetOptDetailForAssets(ctx, in, out)
}

func (h *assetsServiceHandler) GetAppList(ctx context.Context, in *ApplicationRequest, out *ListReply) error {
	return h.AssetsServiceHandler.GetAppList(ctx, in, out)
}

func (h *assetsServiceHandler) GetAppConf(ctx context.Context, in *ApplicationRequest, out *AppConfTmlpReply) error {
	return h.AssetsServiceHandler.GetAppConf(ctx, in, out)
}

func (h *assetsServiceHandler) GetAppDetail(ctx context.Context, in *ApplicationRequest, out *ApplicationDetailReply) error {
	return h.AssetsServiceHandler.GetAppDetail(ctx, in, out)
}
